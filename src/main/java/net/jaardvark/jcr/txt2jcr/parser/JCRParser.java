/* Generated By:JavaCC: Do not edit this line. JCRParser.java */
        package net.jaardvark.jcr.txt2jcr.parser;

        import java.io.Reader;
        import net.jaardvark.jcr.txt2jcr.JCRParseEventHandler;
        import java.util.GregorianCalendar;
        import java.text.DateFormat;
        import java.util.ArrayList;
        import java.util.Date;
        import java.util.Calendar;
        import java.util.GregorianCalendar;
        import net.jaardvark.jcr.txt2jcr.Tuple;
        import org.apache.commons.lang.StringEscapeUtils;
        import org.apache.jackrabbit.util.ISO8601;

        public class JCRParser implements JCRParserConstants {
                protected JCRParseEventHandler handler = null;

                public JCRParseEventHandler getHandler(){ return handler; }
                public void setHandler(JCRParseEventHandler handler){ this.handler = handler; }

                public void handleProperty(String propType, String propName, Object value) throws ParseException {
                        try {
                                if (value instanceof ArrayList)
                                        handler.property(propName, propType, (ArrayList)value);
                                else
                                        handler.property(propName, propType, (Object)value);
                        }
                        catch (Exception ex){
                                 ParseException e = new ParseException("Exception processing parsed content at property "+propName+".");
                                 e.initCause(ex);
                                 throw e;
                        }
                }

                public void handleNodeBegin(String nodeName, String primaryType, String nodeOrderStr) throws ParseException {
                        try {
                                int nodeOrder = Integer.parseInt(nodeOrderStr);
                                handler.nodeBegin(nodeName, primaryType, nodeOrder);
                        }
                        catch (Exception ex){
                                 ParseException e = new ParseException("Exception processing parsed content for node "+nodeName+".");
                                 e.initCause(ex);
                                 throw e;
                        }
                }

                public void handleNodeEnd() throws ParseException {
                        try {
                                handler.nodeEnd();
                        }
                        catch (Exception ex){
                                 ParseException e = new ParseException("Exception processing parsed content.");
                                 e.initCause(ex);
                                 throw e;
                        }
                }

                public void handleFinish() throws ParseException {
                        try {
                                handler.finish();
                        }
                        catch (Exception ex){
                                 ParseException e = new ParseException("Exception processing parsed content.");
                                 e.initCause(ex);
                                 throw e;
                        }
                }

                public String getUnescapedString(String escapedString){
                        if (escapedString.length() < 3)
                                return "";
                        String str = escapedString.substring(1,escapedString.length()-1);
                        str = StringEscapeUtils.unescapeJava(str);
                        return str;
                }

                public Calendar getCalendar(String dateStr) throws ParseException{
                        //try {
                                //Date d = DateFormat.getDateTimeInstance().parse(dateStr);
                    //Calendar c = new GregorianCalendar();
                    //c.setTime(d);
                    //return c;
                        //} catch (java.text.ParseException ex) {
                        //	 ParseException e = new ParseException("Exception processing parsed content.");
                //     e.initCause(ex);
                //     throw e;
                        //}
                        Calendar c = ISO8601.parse(dateStr);
                        if (c==null)
                                throw new ParseException("Cannot parse date value "+dateStr);
                        return c;
        }

                public static void parse(Reader in, JCRParseEventHandler handler) throws ParseException, TokenMgrError {
                        JCRParser parser = new JCRParser(in);
                        parser.setHandler(handler);
                        parser.NODES();
                }

// productions
  final public void NODES() throws ParseException {
    label_1:
    while (true) {
      NODE();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JCRNAME:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
                      handleFinish();
  }

  final public void NODE() throws ParseException {
        Token nn;
        Token nt = null;
        Token no;
    nn = jj_consume_token(JCRNAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case JCRNAME:
      nt = jj_consume_token(JCRNAME);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    no = jj_consume_token(LONG);
                                                         handleNodeBegin(nn.image, nt.image, no.image);
    jj_consume_token(NODEBEGIN);
    label_2:
    while (true) {
      PROPERTY();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROPTYPE:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JCRNAME:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      NODE();
    }
    jj_consume_token(NODEEND);
                                                                                                                                                              handleNodeEnd();
  }

  final public void PROPERTY() throws ParseException {
        Token propType;
        Tuple<Object> val;
    propType = jj_consume_token(PROPTYPE);
    val = PROPERTYVALUES();
                                                       handleProperty( propType.image, (String)val.get(0), val.get(1));
  }

  final public Tuple<Object> PROPERTYVALUES() throws ParseException {
        Token propName;
        Object val;
        ArrayList<Object> vals = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROPMULTIPLE:
      jj_consume_token(PROPMULTIPLE);
      propName = jj_consume_token(PROPNAME);
      jj_consume_token(COLON);
      val = PROPERTYVALUE();
                                                                             vals.add(val);
      label_4:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(PROPVALUESEPERATOR);
        val = PROPERTYVALUE();
                                                                                                                                                         vals.add(val);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROPVALUESEPERATOR:
        jj_consume_token(PROPVALUESEPERATOR);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
                                                                                                                                                                                                         {if (true) return new Tuple<Object>(propName.image,vals);}
      break;
    case PROPNAME:
      propName = jj_consume_token(PROPNAME);
      jj_consume_token(COLON);
      val = PROPERTYVALUE();
                                                              {if (true) return new Tuple<Object>(propName.image,val);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Object PROPERTYVALUE() throws ParseException {
        Token tok;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
      tok = jj_consume_token(LONG);
                       {if (true) return Long.valueOf(tok.image);}
      break;
    case DOUBLE:
      tok = jj_consume_token(DOUBLE);
                         {if (true) return Double.valueOf(tok.image);}
      break;
    case JCRNAME:
      tok = jj_consume_token(JCRNAME);
                          {if (true) return tok.image;}
      break;
    case BOOLEAN:
      tok = jj_consume_token(BOOLEAN);
                          {if (true) return Boolean.valueOf(tok.image);}
      break;
    case STRING:
      tok = jj_consume_token(STRING);
                         {if (true) return getUnescapedString(tok.image);}
      break;
    case DATE:
      tok = jj_consume_token(DATE);
                       {if (true) return getCalendar(tok.image);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(DATE)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(PROPVALUESEPERATOR)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(JCRNAME)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JCRParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000,0x40000,0x200,0x40000,0x1000,0x300000,0x7c008,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JCRParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JCRParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JCRParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JCRParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JCRParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JCRParser(JCRParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JCRParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
